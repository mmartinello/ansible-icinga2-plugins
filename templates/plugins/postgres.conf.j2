# {{ ansible_managed }}

/*
Commands and services for PostgreSQL checks:
  - check_postgres (https://bucardo.org/check_postgres/)
*/ 

# check_postgres (https://bucardo.org/check_postgres/)
object CheckCommand "_postgres" {
        import "ipv4-or-ipv6"

        command = [ "{{ icinga2_plugins_dest_dir }}/check_postgres.pl" ]

        arguments = {
                /*
                Actions:
                 archive_ready         - Check the number of WAL files ready in the pg_xlog/archive_status
                 autovac_freeze        - Checks how close databases are to autovacuum_freeze_max_age.
                 backends              - Number of connections, compared to max_connections.
                 bloat                 - Check for table and index bloat.
                 checkpoint            - Checks how long since the last checkpoint
                 cluster_id            - Checks the Database System Identifier
                 commitratio           - Report if the commit ratio of a database is too low.
                 connection            - Simple connection check.
                 custom_query          - Run a custom query.
                 database_size         - Report if a database is too big.
                 dbstats               - Returns stats from pg_stat_database: Cacti output only
                 disabled_triggers     - Check if any triggers are disabled
                 disk_space            - Checks space of local disks Postgres is using.
                 fsm_pages             - Checks percentage of pages used in free space map.
                 fsm_relations         - Checks percentage of relations used in free space map.
                 hitratio              - Report if the hit ratio of a database is too low.
                 hot_standby_delay     - Check the replication delay in hot standby setup
                 index_size            - Checks the size of indexes.
                 indexes_size          - Checks the size of indexes on tables.
                 last_analyze          - Check the maximum time in seconds since any one table has been analyzed.
                 last_autoanalyze      - Check the maximum time in seconds since any one table has been autoanalyzed.
                 last_autovacuum       - Check the maximum time in seconds since any one table has been autovacuumed.
                 last_vacuum           - Check the maximum time in seconds since any one table has been vacuumed.
                 listener              - Checks for specific listeners.
                 locks                 - Checks the number of locks.
                 logfile               - Checks that the logfile is being written to correctly.
                 new_version_bc        - Checks if a newer version of Bucardo is available.
                 new_version_box       - Checks if a newer version of boxinfo is available.
                 new_version_cp        - Checks if a newer version of check_postgres.pl is available.
                 new_version_pg        - Checks if a newer version of Postgres is available.
                 new_version_tnm       - Checks if a newer version of tail_n_mail is available.
                 pgagent_jobs          - Check for no failed pgAgent jobs within a specified period of time.
                 pgb_pool_cl_active    - Check the number of active clients in each pgbouncer pool.
                 pgb_pool_cl_waiting   - Check the number of waiting clients in each pgbouncer pool.
                 pgb_pool_maxwait      - Check the current maximum wait time for client connections in pgbouncer pools.
                 pgb_pool_sv_active    - Check the number of active server connections in each pgbouncer pool.
                 pgb_pool_sv_idle      - Check the number of idle server connections in each pgbouncer pool.
                 pgb_pool_sv_login     - Check the number of login server connections in each pgbouncer pool.
                 pgb_pool_sv_tested    - Check the number of tested server connections in each pgbouncer pool.
                 pgb_pool_sv_used      - Check the number of used server connections in each pgbouncer pool.
                 pgbouncer_backends    - Check how many clients are connected to pgbouncer compared to max_client_conn.
                 pgbouncer_checksum    - Check that no pgbouncer settings have changed since the last check.
                 prepared_txns         - Checks number and age of prepared transactions.
                 query_runtime         - Check how long a specific query takes to run.
                 query_time            - Checks the maximum running time of current queries.
                 relation_size         - Checks the size of tables and indexes.
                 replicate_row         - Verify a simple update gets replicated to another server.
                 replication_slots     - Check the replication delay for replication slots
                 same_schema           - Verify that two databases have the exact same tables, columns, etc.
                 sequence              - Checks remaining calls left in sequences.
                 settings_checksum     - Check that no settings have changed since the last check.
                 slony_status          - Ensure Slony is up to date via sl_status.
                 table_size            - Checks the size of tables (including TOAST).
                 timesync              - Compare database time to local system time.
                 total_relation_size   - Checks the size of tables (including indexes and TOAST).
                 txn_idle              - Checks the maximum "idle in transaction" time.
                 txn_time              - Checks the maximum open transaction time.
                 txn_wraparound        - See how close databases are getting to transaction ID wraparound.
                 version               - Check for proper Postgres version.
                 wal_files             - Check the number of WAL files in the pg_xlog directory
                */
                "--action" = {
                        value = "$postgres_action$"
                        description = "Test to run"
                        required = true
                }
                "-H" = {
                        value = "$postgres_host$"
                        description = "hostname(s) to connect to; defaults to none (Unix socket)"
                }
                "-p" = {
                        value = "$postgres_port$"
                        description = "port(s) to connect to; defaults to 5432"
                }
                "-db" = {
                        value = "$postgres_dbname$"
                        description = "database name(s) to connect to; defaults to 'postgres' or 'template1'"
                }
                "-u" = {
                        value = "$postgres_user$"
                        description = "database user(s) to connect as; defaults to 'postgres'"
                }
                "--dbpass" = {
                        value = "$postgres_password$"
                        description = "database password(s); use a .pgpass file instead when possible"
                }
                "--dbservice" = {
                        value = "$postgres_service$"
                        description = "service name to use inside of pg_service.conf"
                }
                "-w" = {
                        value = "$postgres_warning$"
                        description = "the warning threshold, range depends on the action"
                }
                "-c" = {
                        value = "$postgres_critical$"
                        description = "the critical threshold, range depends on the action"
                }
                "--include" = {
                        value = "$postgres_include$"
                        description = "items to specifically include (e.g. tables), depends on the action"
                }
                "--exclude" = {
                        value = "$postgres_exclude$"
                        description = "items to specifically exclude (e.g. tables), depends on the action"
                }
                "--assume-standby-mode" = {
                        set_if = "$postgres_assume_standby_mode$"
                        description = "assume that server in continious WAL recovery mode"
                }
                "--assume-prod" = {
                        value = "$postgres_assume_prod$"
                        description = "assume that server in production mode"
                }
                "--assume-async" = {
                        value = "$postgres_assume_async$"
                        description = "assume that any replication is asynchronous"
                }
                "--PGBINDIR" = {
                        value = "$postgres_pgbindir$"
                        description = "path of the postgresql binaries; avoid using if possible"
                }
                "--PSQL" = {
                        value = "$postgres_psql_executable$"
                        description = "(deprecated) location of the psql executable; avoid using if possible"
                }
                "-v" = {
                        value = "$postgres_verbose$"
                        description = "verbosity level; can be used more than once to increase the level"
                }
                "-t" = {
                        value = "$postgres_timeout$"
                        description = "how long in seconds before we timeout. Defaults to 30 seconds"
                }
        }

        vars.postgres_host = "$check_address$"
        vars.postgres_port = 5432
        vars.postgres_action = "connection"
        vars.postgres_timeout = 30
}

# Check PostgreSQL connection: assigned through 'postgres' host var
apply Service for (service_name => service_config in host.vars.postgres) {
  import "generic-service"
  name = service_name + " - Connection"
  check_command = "_postgres"

  vars.postgres_action = "connection"
  vars += service_config
}

# Custom PostgreSQL check: assigned through 'postgres_custom' host var
apply Service for (service_name => service_config in host.vars.postgres_custom) {
  import "generic-service"
  check_command = "_postgres"

  vars += service_config
}


###############################################################################
# Groups

# Host group
object HostGroup "postgresql-servers" {
    display_name = "PostgreSQL Server Hosts"
    assign where "postgres" in keys(host.vars) || "postgres_custom" in keys(host.vars)
}

# Service group
object ServiceGroup "postgresql" {
  display_name = "PostgreSQL Server Services"

  assign where match("_postgres", service.check_command)
}
