/*
 * Service apply rules.
 *
 * The CheckCommand objects `ping4`, `ping6`, etc
 * are provided by the plugin check command templates.
 * Check the documentation for details.
 *
 * Tip: Use `icinga2 object list --type Service` to
 * list all service objects after running
 * configuration validation (`icinga2 daemon -C`).
 */

# Generic IPv4 ping
apply Service "Ping IPv4" {
  import "generic-service"

  check_command = "ping4"

  assign where host.address
  ignore where host.vars.skip_ping
  ignore where host.vars.linuxfabrik_monitoring_plugins_installed
}

# Generic IPv6 ping
apply Service "Ping IPv6" {
  import "generic-service"

  check_command = "ping6"

  assign where host.address6
  ignore where host.vars.skip_ping
  ignore where host.vars.linuxfabrik_monitoring_plugins_installed
}

/*
 * Apply the `ssh` service to all hosts
 * with the `address` attribute defined and
 * the custom attribute `os` set to `Linux`.
 */
apply Service "SSH" {
  import "generic-service"

  check_command = "ssh"

  assign where (host.address || host.address6) && (host.vars.os == "Linux" || host.vars.os == "FreeBSD")
}

# check_ssh service definition (applied with host.vars.ssh)
apply Service for (service_name => service_config in host.vars.ssh) {
    import "generic-service"
    name = service_name
    check_command = "ssh"
    vars += service_config

    if (host.vars.client_endpoint) {
        command_endpoint = host.vars.client_endpoint
    }
}



apply Service for (http_vhost => config in host.vars.http_vhosts) {
  import "generic-service"

  check_command = "http"

  vars += config
}

apply Service for (disk => config in host.vars.disks) {
  import "generic-service"

  check_command = "disk"

  vars += config

  if (host.vars.client_endpoint) {
    command_endpoint = host.vars.client_endpoint
  }
}

apply Service "Icinga" {
  import "generic-service"

  check_command = "icinga"

  assign where host.name == NodeName
}

apply Service "System Load" {
  import "generic-service"

  check_command = "load"

  /* Used by the ScheduledDowntime apply rule in `downtimes.conf`. */
  /* vars.backup_downtime = "02:00-03:00" */

  assign where (host.vars.os == "Linux" || host.vars.os == "FreeBSD") && host.vars.vm_type != "lxc" && host.vars.check_load != false && !host.vars.nrpe

  # vars.notifications_disable = true
  max_check_attempts = 120
  retry_interval = 1m

  if (host.vars.client_endpoint) {
    command_endpoint = host.vars.client_endpoint
  }
}

apply Service "Running Processes" {
  import "generic-service"

  check_command = "procs"

  assign where (host.vars.os == "Linux" || host.vars.os == "FreeBSD") && host.vars.distro != "Proxmox" && !host.vars.nrpe

  if (host.vars.client_endpoint) {
    command_endpoint = host.vars.client_endpoint
  }
}

apply Service "Swap" {
  import "generic-service"

  check_command = "swap"

  assign where host.vars.check_swap != false && (host.vars.os == "Linux" || host.vars.os == "FreeBSD") && host.vars.vm_type != "lxc" && !host.vars.nrpe

  max_check_attempts = 120
  retry_interval = 1m

  if (host.vars.client_endpoint) {
    command_endpoint = host.vars.client_endpoint
  }
}

apply Service "Logged Users" {
  import "generic-service"

  check_command = "users"

  assign where (host.vars.os == "Linux" || host.vars.os == "FreeBSD") && !host.vars.nrpe

  if (host.vars.client_endpoint) {
    command_endpoint = host.vars.client_endpoint
  }
}

apply Service for (ftp => config in host.vars.ftp) {
  import "generic-service"

  check_command = "ftp"

  vars += config
}

apply Service for (tcp => config in host.vars.tcp) {
  import "generic-service"

  check_command = "tcp"

  vars += config

  if (host.vars.client_endpoint && config.command_endpoint != "local") {
    command_endpoint = host.vars.client_endpoint
  }
}

apply Service for (procs => config in host.vars.procs) {
  import "generic-service"

  check_command = "procs"

  vars += config

  if (host.vars.client_endpoint) {
    command_endpoint = host.vars.client_endpoint
  }
}

apply Service "Cron Daemon" {
  import "generic-service"
  check_command = "procs"

  if (host.vars.distro == "CentOS" || host.vars.distro == "Redhat") {
    vars.procs_command = "crond"
  } else {
    vars.procs_command = "cron"
  }

  vars.procs_critical = "1:"

  if (host.vars.client_endpoint) {
    command_endpoint = host.vars.client_endpoint
  }

  assign where host.vars.os == "Linux" && host.vars.check_cron != false
}

apply Service "Rsyslog Daemon" {
  import "generic-service"
  check_command = "procs"

  vars.procs_command = "rsyslogd"
  vars.procs_critical = "1:"

  if (host.vars.client_endpoint) {
    command_endpoint = host.vars.client_endpoint
  }

  assign where host.vars.os == "Linux" && host.vars.check_rsyslogd != false
}

apply Service "SNMP Daemon" {
  import "generic-service"
  check_command = "procs"

  vars.procs_command = "snmpd"
  vars.procs_critical = "1:"

  if (host.vars.client_endpoint) {
    command_endpoint = host.vars.client_endpoint
  }

  assign where host.vars.os == "Linux" && host.vars.check_snmpd != false
}

apply Service for (mysql => config in host.vars.mysql) {
  import "generic-service"
  check_command = "mysql"
  vars += config
}

apply Service "APT Packages Updates" {
  import "generic-service"

  check_command = "apt"

  enable_notifications = false

  assign where host.vars.distro == "Debian" || host.vars.distro == "Proxmox" || host.vars.distro == "Ubuntu"

  if (host.vars.client_endpoint) {
    command_endpoint = host.vars.client_endpoint
  }
}

apply Service for (dns => config in host.vars.dns) {
  import "generic-service"
  check_command = "dns"
  vars += config
}

apply Service "DNS Resolution" {
  import "generic-service"

  check_command = "dns"

  assign where host.vars.os == "Linux"

  vars.dns_lookup = "www.google.com"

  if (host.vars.client_endpoint) {
    command_endpoint = host.vars.client_endpoint
  }
}

apply Service "Local date/time" {
  import "generic-service"

  check_command = "ntp_time"

  assign where host.vars.os == "Linux"

  vars.ntp_address = "ntp.ien.it"
  vars.ntp_warning = "0.5"
  vars.ntp_critical = "1"

  if (host.vars.client_endpoint) {
    command_endpoint = host.vars.client_endpoint
  }
}

# Ping a remote host (applied with the 'ping' host var)
apply Service for (service_name => service_config in host.vars.ping) {
  import "generic-service"

  check_command = "ping4"

  vars += service_config


  if (host.vars.client_endpoint) {
    command_endpoint = host.vars.client_endpoint
  }

  ignore where host.vars.linuxfabrik_monitoring_plugins_installed
}
