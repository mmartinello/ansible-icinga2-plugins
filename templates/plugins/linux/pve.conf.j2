# {{ ansible_managed }}

/*
Commands and services for PVE checks:
  - check_pve (https://gitlab.com/6uellerBpanda/check_pve)
*/ 


#
# Check Commands
###############################################################################

# check_pve (https://gitlab.com/6uellerBpanda/check_pve)
object CheckCommand "_check_pve" {
    import "ipv4-or-ipv6"

    command = [ "{{ icinga2_plugins_dest_dir }}/check_pve.rb" ]

    arguments = {
        "--mode" = {
            value = "$pve_mode$"
            description = "Mode to check"
            required = true
            order = -1
        }
        "--address" = {
            value = "$pve_address$"
            description = "PVE host address"
        }
        "--insecure" = {
            set_if = "$pve_insecure$"
            description = "No SSL verification"
        }
        "--node" = {
            value = "$pve_node$"
            description = "PVE Node name"
        }
        "--username" = {
            value = "$pve_username$"
            description = "Username with auth realm e.g. monitoring@pve"
        }
        "--password" = {
            value = "$pve_password$"
            description = "Password"
        }
        "--warning" = {
            value = "$pve_warning$"
            description = "Warning threshold"
        }
        "--critical" = {
            value = "$pve_critical$"
            description = "Critical threshold"
        }
        "--unit" = {
            value = "$pve_unit$"
            description = "Unit - kb, mb, gb, tb"
        }
        "--name" = {
            value = "$pve_name$"
            description = "Name for storage or user filter for tasks"
        }
        "--vmid" = {
            value = "$pve_vmid$"
            description = "ID of qemu/lxc machine"
        }
        "--type" = {
            value = "$pve_type$"
            description = "VM type lxc, qemu or type filter for tasks"
        }
        "--exclude" = {
            value = "$pve_exclude$"
            description = "Exclude (regex)"
        }
        "--timeframe" = {
            value = "$pve_timeframe$"
            description = "Timeframe for vm checks: hour,day,week,month or year"
        }
        "--cf" = {
            value = "$pve_cf$"
            description = "RRD cf: average or max"
        }
        "--lookback" = {
            value = "$pve_lookback$"
            description = "Lookback in seconds"
        }
    }

    vars.pve_address = "$check_address$"
}

# check_pve_backups (https://github.com/mmartinello/check_pve_backups)
object CheckCommand "_check_pve_backups" {
    import "ipv4-or-ipv6"

    command = [ "{{ icinga2_plugins_dest_dir }}/check_pve_backups.py" ]

    arguments = {
        "--check" = {
            value = "$pve_backups_check$"
            description = "The check to be done: (not_backed_up = virtual machines not backed up) (backups = available backups for virtual machines)"
            required = true
            skip_key = true
            order = -1
        }
        "--host" = {
            value = "$pve_backups_host$"
            description = "The Proxmox API host"
        }
        "--debug" = {
            set_if = "$pve_backups_debug$"
            description = "Print debugging info to console. This may make the plugin not working with Icinga since it prints stuff to console."
        }
        "--debug2" = {
            set_if = "$pve_backups_debug2$"
            description = "Print exceptions to console. This may make the plugin not working and get wrong results with Icinga since it prints stuff to console."
        }
        "--host" = {
            value = "$pve_backups_host$"
            description = "The Proxmox API host"
        }
        "--port" = {
            value = "$pve_backups_port$"
            description = "The Proxmox port"
        }
        "--username" = {
            value = "$pve_backups_username$"
            description = "The Proxmox API username (username@realm)"
            required = true
        }
        "--password" = {
            value = "$pve_backups_password$"
            description = "The Proxmox API password"
            required = true
        }
        "--verify-ssl" = {
            set_if = "$pve_backups_verify_ssl$"
            description = "Verify the SSL certificate"
        }
        "--level" = {
            value = "$pve_backups_level$"
            description = "The Icinga error level to raise in case of failure ('not_backed_up' check only)"
        }
        "--storage" = {
            value = "$pve_backups_storage$"
            description = "The backup storage"
        }
        "--node" = {
            value = "$pve_backups_node$"
            description = "Filter the VMs running on this Proxmox node"
        }
        "--timeout" = {
            value = "$pve_backups_timeout$"
            description = "The timeout in seconds"
        }
        "--include" = {
            value = "$pve_backups_include$"
            description = "List of VM IDs to be checked"
            repeat_key = true
        }
        "--exclude" = {
            value = "$pve_backups_exclude$"
            description = "List of VM IDs to be excluded from check"
            repeat_key = true
        }
        "--warning" = {
            value = "$pve_backups_warning$"
            description = "Warning threshold in minutes"
        }
        "--critical" = {
            value = "$pve_backups_critical$"
            description = "Critical threshold in minutes"
        }
        "--print-ok" = {
            set_if = "$pve_backups_print_ok$"
            description = "Print OK backups (default false)"
        }
    }

    vars.pve_backups_host = "$check_address$"
}


#
# Services
###############################################################################

# Generic service assignment
# Assigned with '_check_pve' host var
apply Service for (service_name => service_config in host.vars._check_pve) {
  import "generic-service"
  name = service_name

  # Custom icon
  if (service_config.icon_image) {
    icon_image = service_config.icon_image
  } else {
    icon_image = "pve.png"
  }

  check_command = "_check_pve"
  vars += service_config
}

# Cluster status (automatically assigned when host.vars.pve exists)
apply Service "Proxmox VE - Cluster Status" {
  import "generic-service"

  check_command = "_check_pve"
  icon_image = "pve.png"

  vars += host.vars.pve
  vars.pve_mode = "cluster-status"

  assign where host.vars.pve
}

# SMART (automatically assigned when host.vars.pve exists)
apply Service "Proxmox VE - Disk SMART Status" {
  import "generic-service"

  check_command = "_check_pve"
  icon_image = "disk-smart.png"

  vars += host.vars.pve
  vars.pve_mode = "node-smart-status"

  # Exclude
  if (vars.smart_exclude) {
    vars.pve_exclude = vars.smart_exclude
  }

  assign where host.vars.pve
}

# Updates (automatically assigned when host.vars.pve exists)
apply Service "Proxmox VE - Updates" {
  import "generic-service"

  check_command = "_always_ok"
  icon_image = "updates.png"
  enable_notifications = false

  vars.pve_mode = "node-updates-available"
  vars.always_ok_command = "{{ icinga2_plugins_dest_dir }}/check_pve.rb"

  vars.always_ok_arguments = [ "--mode node-updates-available"]
  vars.always_ok_arguments+= [ "--address " + host.vars.pve.pve_address ]
  vars.always_ok_arguments+= [ "--username " + host.vars.pve.pve_username ]
  vars.always_ok_arguments+= [ "--password " + host.vars.pve.pve_password ]
  vars.always_ok_arguments+= [ "--node " + host.vars.pve.pve_node ]

  if (host.vars.pve.pve_insecure) {
    vars.always_ok_arguments+= "--insecure"
  }

  assign where host.vars.pve
}

# Subscription (automatically assigned when host.vars.pve.pve_subscribed=true)
apply Service "Proxmox VE - Subscription" {
  import "generic-service"

  check_command = "_check_pve"
  icon_image = "pve.png"

  vars += host.vars.pve
  vars.pve_mode = "node-subscription-valid"

  # Warning threshold
  if (vars.subscription_warning) {
    vars.pve_warning = vars.subscription_warning
  } else {
    vars.pve_warning = "60"
  }

  # Critical threshold
  if (vars.subscription_critical) {
    vars.pve_critical = vars.subscription_critical
  } else {
    vars.pve_critical = "15"
  }

  assign where host.vars.pve && host.vars.pve.pve_subscribed
}

# Services (automatically assigned when host.vars.pve exists)
apply Service "Proxmox VE - Services" {
  import "generic-service"

  check_command = "_check_pve"
  icon_image = "service.png"

  vars += host.vars.pve
  vars.pve_mode = "node-services-status"

  # Exclude
  if (vars.services_exclude) {
    vars.pve_exclude = vars.services_exclude
  }

  assign where host.vars.pve
}

# Tasks (automatically assigned when host.vars.pve exists)
apply Service "Proxmox VE - Tasks" {
  import "generic-service"

  check_command = "_check_pve"
  icon_image = "pve.png"

  vars += host.vars.pve
  vars.pve_mode = "node-task-errors"

  # Lookback
  if (vars.tasks_lookback) {
    vars.pve_lookback = vars.tasks_lookback
  } else {
    vars.pve_lookback = "3600"
  }

  # Name
  if (vars.tasks_name) {
    vars.pve_name = vars.tasks_name
  }

  # Type
  if (vars.tasks_type) {
    vars.pve_type = vars.tasks_type
  }

  # Exclude
  if (vars.tasks_exclude) {
    vars.pve_exclude = vars.tasks_exclude
  }

  assign where host.vars.pve
}

# Storage Usage (automatically assigned when host.vars.pve exists)
apply Service for (storage_name in host.vars.pve.storage_names) {
  import "generic-service"
  name = "Proxmox VE - Storage '" + storage_name + "' Usage"

  check_command = "_check_pve"
  icon_image = "disk-usage.png"

  vars += host.vars.pve
  vars.pve_mode = "node-storage-usage"
  vars.pve_name = storage_name

  # Warning threshold
  if (vars.storage_warning) {
    vars.pve_warning = vars.storage_warning
  } else {
    vars.pve_warning = "40"
  }

  # Critical threshold
  if (vars.storage_critical) {
    vars.pve_critical = vars.storage_critical
  } else {
    vars.pve_critical = "60"
  }

  assign where host.vars.pve && host.vars.pve.storage_names != []
}

# Storage status (automatically assigned when host.vars.pve exists)
apply Service "Proxmox VE - Storage Status" {
  import "generic-service"

  check_command = "_check_pve"
  icon_image = "disk-smart.png"

  vars += host.vars.pve
  vars.pve_mode = "node-storage-status"

  # Exclude
  if (vars.storage_exclude) {
    vars.pve_exclude = vars.storage_exclude
  }

  assign where host.vars.pve
}

# CPU Usage (automatically assigned when host.vars.pve exists)
apply Service "Proxmox VE - CPU Usage" {
  import "generic-service"

  check_command = "_check_pve"
  icon_image = "cpu-usage.png"

  vars += host.vars.pve
  vars.pve_mode = "node-cpu-usage"

  # Warning threshold
  if (vars.cpu_warning) {
    vars.pve_warning = vars.cpu_warning
  } else {
    vars.pve_warning = "80"
  }

  # Critical threshold
  if (vars.cpu_critical) {
    vars.pve_critical = vars.cpu_critical
  } else {
    vars.pve_critical = "90"
  }

  assign where host.vars.pve
}

# Memory Usage (automatically assigned when host.vars.pve exists)
apply Service "Proxmox VE - Memory Usage" {
  import "generic-service"

  check_command = "_check_pve"
  icon_image = "memory-usage.png"

  vars += host.vars.pve
  vars.pve_mode = "node-memory-usage"

  # Warning threshold
  if (vars.memory_warning) {
    vars.pve_warning = vars.memory_warning
  } else {
    vars.pve_warning = "90"
  }

  # Critical threshold
  if (vars.memory_critical) {
    vars.pve_critical = vars.memory_critical
  } else {
    vars.pve_critical = "95"
  }

  assign where host.vars.pve
}

# IO Wait (automatically assigned when host.vars.pve exists)
apply Service "Proxmox VE - IO Wait" {
  import "generic-service"

  check_command = "_check_pve"
  icon_image = "disk-io.png"

  vars += host.vars.pve
  vars.pve_mode = "node-io-wait"

  # Warning threshold
  if (vars.io_warning) {
    vars.pve_warning = vars.iowait_warning
  } else {
    vars.pve_warning = "5"
  }

  # Critical threshold
  if (vars.io_critical) {
    vars.pve_critical = vars.iowait_critical
  } else {
    vars.pve_critical = "10"
  }

  assign where host.vars.pve
}

# Network usage (automatically assigned when host.vars.pve exists)
apply Service "Proxmox VE - Network Usage" {
  import "generic-service"

  check_command = "_check_pve"
  icon_image = "network-connections.png"

  vars += host.vars.pve
  vars.pve_mode = "node-net-in-usage"

  # Warning threshold
  if (vars.network_warning) {
    vars.pve_warning = vars.network_warning
  } else {
    vars.pve_warning = "100"
  }

  # Critical threshold
  if (vars.network_critical) {
    vars.pve_critical = vars.network_critical
  } else {
    vars.pve_critical = "200"
  }

  assign where host.vars.pve
}

# KSM Usage (automatically assigned when host.vars.pve exists)
apply Service "Proxmox VE - KSM Usage" {
  import "generic-service"

  check_command = "_check_pve"
  icon_image = "memory-usage.png"

  vars += host.vars.pve
  vars.pve_mode = "node-ksm-usage"

  # Warning threshold
  if (vars.ksm_warning) {
    vars.pve_warning = vars.ksm_warning
  } else {
    vars.pve_warning = "20"
  }

  # Critical threshold
  if (vars.ksm_critical) {
    vars.pve_critical = vars.ksm_critical
  } else {
    vars.pve_critical = "25"
  }

  # Unit
  if (vars.ksm_unit) {
    vars.pve_critical = vars.ksm_unit
  } else {
    vars.pve_unit = "gb"
  }

  assign where host.vars.pve
}

# Generic service assignment
# Assigned with '_check_pve_backups' host var
apply Service for (service_name => service_config in host.vars._check_pve_backups) {
  import "generic-service"
  name = service_name
  max_check_attempts = 1

  # Custom icon
  if (service_config.icon_image) {
    icon_image = service_config.icon_image
  } else {
    icon_image = "pve.png"
  }

  # Custom check interval
  if (service_config.check_interval) {
    check_interval = service_config.check_interval
  } else {
    check_interval = 1h
  }

  # Custom retry interval
  if (service_config.retry_interval) {
    retry_interval = service_config.retry_interval
  } else {
    retry_interval = 15m
  }

  check_command = "_check_pve_backups"
  vars += service_config
}

# Not backed up VMs (automatically assigned when host.vars.pve and
# host.vars.pve_check_not_backed_up exists)
apply Service "Proxmox VE - Not backed up VMs" {
  import "generic-service"

  check_command = "_check_pve_backups"
  icon_image = "pve.png"

  vars.pve_backups_check = "not_backed_up"
  vars.pve_backups_host = host.vars.pve["pve_address"]
  vars.pve_backups_username = host.vars.pve["pve_username"]
  vars.pve_backups_password = host.vars.pve["pve_password"]
  vars.pve_backups_node = host.vars.pve["pve_node"]
  
  if (host.vars.pve_backups) {
    vars += host.vars.pve_backups
  }

  assign where host.vars.pve && host.vars.pve.pve_check_not_backed_up
}

# Check backups (automatically assigned when host.vars.pve and
# host.vars.pve_backups exists)
apply Service "Proxmox VE - VM Backups" {
  import "generic-service"

  check_command = "_check_pve_backups"
  icon_image = "pve.png"
  max_check_attempts = 1

  # Custom check interval
  if (host.vars.pve_backups["check_interval"]) {
    check_interval = host.vars.pve_backups["check_interval"]
  } else {
    check_interval = 1h
  }

  # Custom retry interval
  if (host.vars.pve_backups["retry_interval"]) {
    retry_interval = host.vars.pve_backups["retry_interval"]
  } else {
    retry_interval = 15m
  }

  vars.pve_backups_check = "backups"
  vars.pve_backups_host = host.vars.pve["pve_address"]
  vars.pve_backups_username = host.vars.pve["pve_username"]
  vars.pve_backups_password = host.vars.pve["pve_password"]
  vars.pve_backups_node = host.vars.pve["pve_node"]
  vars.pve_backups_storage = "backup"
  vars.pve_backups_warning = 1800
  vars.pve_backups_critical = 3240

  if (host.vars.pve_backups) {
    vars += host.vars.pve_backups
  }

  assign where host.vars.pve && host.vars.pve_backups
}


#
# Groups
###############################################################################

# Host group
object HostGroup "pve" {
    display_name = "Proxmox VE Servers"
    assign where "pve" in keys(host.vars)
}

# Service group
object ServiceGroup "pve" {
  display_name = "Proxmox VE Checks"

  assign where service.check_command in ["_check_pve", "_check_pve_backups"]
}
